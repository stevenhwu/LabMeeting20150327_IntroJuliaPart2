
println("Hello World")
println("%s", "Hello World")


@printf "%s\n" "Hello World"
@printf "Macro: %s %s\n" "Hello" "World"

number = 12
text = "Hello"
text2 = "Worlds"
@printf "%s %d %s\n" text number "$text2"

square(x) = x*x
println(square(4))
println(square(5))

function x²(x)
    return x*x
end
#x\^2 tab 
x²(8)

function xʸ( ; x=null, y=null)
    return x^y
end

println( xʸ(x=4, y=3) )
println( xʸ(y=4, x=3) )


function power(x=null, y=null)
    return x^y
end
println( power(4,3) )
println( power(x=4, y=3) ) #error here!

function ∑(arg...)
    sum = 0
    for i in arg
        sum+=i
    end
    return sum
end

println( ∑(3,4,5) )
println( ∑(1,2,3,4,5,6,7,8,9) )


arr = rand(5)
println("Orig:\t", arr)

sort(arr)
println("sort:\t", arr)## order unchanged

sort!(arr)
println("sort!:\t", arr)


using Base.Test

@test 1 == 1 

@test 1 == 0  

@test_throws ErrorException error("An error")  #pass

@test_throws BoundsError error("An error")  #fail

@test_throws DomainError throw(DomainError()) #pass

@test_throws DomainError throw(EOFError()) #fail

@test_approx_eq 1. 0.999999999 #fail

@test_approx_eq 1. 0.9999999999999 #pass

@test_approx_eq_eps 1. 0.999 1e-2  #pass

@test_approx_eq_eps 1. 0.999 1e-4  #fail

println(  Integer <: Number  )
println(  Integer <: FloatingPoint  )
println(  issubtype(Integer, Number)  )
println(  issubtype(Integer, FloatingPoint)  )

println(  super(Integer)  )
println(  super(Real)  )

subtypes(Number)

subtypes(Real) 

println(  isa(1, Number)  )
println(  isa(1.1, Integer)  )

function test{T <: Any}(a::T)
    println("$a is a $T")
end

test(3)  
test(3.2)
test(1:3)
test(22//7)
test("test")


function testType{T <: Int}(a::T)
    println("$a is a Int")
end

function testType{T <: Number}(a::T)
    println("$a is a Number")
end

function testType{T <: String}(a::T)
    println("$a is a String")
end

testType(3)  
testType(3.2)
testType(22//7)
testType("this")
testType(1:3) ## Error! has no method matching testType(::UnitRange{Int64})

methods(testType) ## Find out all methods assocated with testType


abstract Person

type Postdoc <: Person
    id::Int64
end

p1 = Postdoc(101)
println(p1)
println("super(Postdoc):", super(Postdoc))


abstract Minion

type Postdoc <: Minion
	id::Int64
	name::String
	project::String
	Postdoc(id, name, project) = new(id, name, project)
	Postdoc(id, name) = new(id, name, "Nothing to do")
end
Postdoc(id) = Postdoc(id, "No Name", "Nothing to do")

## you will get "invalid redefinition of constant Postdoc"

module MinionModule
#http://julia.readthedocs.org/en/latest/manual/modules/
# using vs import

abstract Minion ## abstract type

function printMinion(p)
    println("print: \t", p.id, "\t", p.name, "\t", p.project)
end

function getID(p::Minion)
	return p.id
end

type Postdoc <: Minion
	id::Int64
	name::String
	project::String
	Postdoc(id, name, project) = new(id, name, project)
	Postdoc(id, name) = new(id, name, "Nothing to do")
end
Postdoc(id) = Postdoc(id, "No Name", "Nothing to do")
## multiple constructors


type Student <: Minion
	id::Int64
	name::String
	project::String
	Student(id, name, project) = new(id, name, project)
	Student(id) = new(id, "No Name", "Nothing to do")
end

end


using MinionModule

println( super(MinionModule.Postdoc) )
println( super(MinionModule.Student) )
println( super(MinionModule.Minion) )


using MinionModule

p1 = MinionModule.Postdoc(101)
p2 = MinionModule.Postdoc(102, "Name2")
p3 = MinionModule.Postdoc(103, "Name3", "work hard")

println("ID: ",MinionModule.getID(p1))
println("ID: ",MinionModule.getID(p2))
println("ID: ",MinionModule.getID(p3))

MinionModule.printMinion(p1)
MinionModule.printMinion(p2)
MinionModule.printMinion(p3)

s1 = MinionModule.Student(201)
s2 = MinionModule.Student(202)

println("ID: ",MinionModule.getID(s1))
MinionModule.printMinion(s1)
println("ID: ",MinionModule.getID(s2))
MinionModule.printMinion(s2)



module MinionModule
#http://julia.readthedocs.org/en/latest/manual/modules/
# using vs import

abstract Minion ## abstract type

function printMinion(p) ## Take all type
    println("print: \t", p.id, "\t", p.name, "\t", p.project)
end

function getID(p::Minion) ## only take Minion type
	return p.id
end

type Postdoc <: Minion
	id::Int64
	name::String
	project::String
	Postdoc(id, name, project) = new(id, name, project)
	Postdoc(id, name) = new(id, name, "Nothing to do")
end
Postdoc(id) = Postdoc(id, "No Name", "Nothing to do")
## multiple constructors


type Student <: Minion
	id::Int64
	name::String
	project::String
	Student(id, name, project) = new(id, name, project)
	Student(id) = new(id, "No Name", "Nothing to do")
end

##Visitor is belong to ::Any
type Visitor
	id::Int64
	name::String
	project::String
end

end

using MinionModule
v1 = MinionModule.Visitor(800, "V1", "N/A")
MinionModule.printMinion(v1)
MinionModule.getID(v1)# ERROR!
#This is **NOT** what do we want. let's change it below


module MinionModule
#http://julia.readthedocs.org/en/latest/manual/modules/
# using vs import

abstract Person ## abstract type
abstract Minion <: Person

function printMinion(p::Minion)
    println("print: \t", p.id, "\t", p.name, "\t", p.project)
end

function getID{T <: Person}(p::T) 
	return p.id
end

type Postdoc <: Minion
	id::Int64
	name::String
	project::String
	Postdoc(id, name, project) = new(id, name, project)
	Postdoc(id, name) = new(id, name, "Nothing to do")
end
Postdoc(id) = Postdoc(id, "No Name", "Nothing to do")
## multiple constructors


type Student <: Minion
	id::Int64
	name::String
	project::String
	Student(id, name, project) = new(id, name, project)
	Student(id) = new(id, "No Name", "Nothing to do")
end

##Visitor is belong to ::Person
type Visitor <: Person
	id::Int64
	name::String
	project::String
end


function minionType(p::Minion)
    "Minion ", p.id # access type properties using dot notation
end

function minionType(p::Student)
    "Student", p.id
end

function minionType{T <: Person}(p::T)
    "Person", p.id
end


end

using MinionModule


p3 = MinionModule.Postdoc(103, "Name3", "work hard")

println("ID: ",MinionModule.getID(p3))
MinionModule.printMinion(p3)

s1 = MinionModule.Student(201)
println("ID: ",MinionModule.getID(s1))
MinionModule.printMinion(s1)


v1 = MinionModule.Visitor(800, "V1", "N/A")
print("ID: ",MinionModule.getID(v1) )
MinionModule.printMinion(v1) # ERROR! has no method matching printMinion(::Visitor)
#This is what we expected, getID works on all `Person` but printMinion only works no `Minion`
#Visitor is not a Minion

using MinionModule
println(subtypes(MinionModule.Person))
println(subtypes(MinionModule.Minion))
print(super(MinionModule.Postdoc))
methods(MinionModule.getID)


module Fail
type Programmer 
    id::Int64
    project::String
    Programmer(id, project) = new(id, project)
    
    ## Many OO program will "link/associate/bind/boundle" function with it's type/class
    function AssignProjcet (newProjcet)
        project = newProjcet
    end
    # NOT quite what julia is design for
end
end


using Fail
prog1 = Fail.Programmer(10, "old project")
println (prog1)

prog1.AssignProjcet("new project") ## Error! you get `type Programmer has no field AssignProjcet`
